# Git 工作流规则

## 分支策略

### Git Flow 分支模型
- `main` - 主分支，包含生产环境代码
- `develop` - 开发分支，集成最新功能
- `feature/*` - 功能分支，开发新功能
- `release/*` - 发布分支，准备发布版本
- `hotfix/*` - 热修复分支，修复生产环境问题

### 分支命名规范
```
feature/user-authentication    # 功能分支
feature/shopping-cart         # 功能分支
release/v1.2.0               # 发布分支
hotfix/critical-security-fix  # 热修复分支
```

### 功能分支工作流
1. 从 `develop` 创建功能分支
2. 在功能分支上开发
3. 完成后创建 Pull Request 到 `develop`
4. 代码审查通过后合并
5. 删除功能分支

## 提交规范

### 语义化提交格式
```
<类型>[(范围)]: <描述>

[可选的正文]

[可选的脚注]
```

### 提交类型
- `feat`: 新功能
- `fix`: 修复 bug
- `docs`: 文档变更
- `style`: 代码格式（不影响代码运行）
- `refactor`: 代码重构
- `test`: 添加或修改测试
- `chore`: 构建过程或辅助工具的变动
- `perf`: 性能优化
- `ci`: CI/CD 相关变更

### 提交示例
```bash
feat(auth): 添加用户登录功能

实现了基于 JWT 的用户认证系统，包括：
- 用户登录接口
- Token 验证中间件
- 密码加密存储

Closes #123
```

```bash
fix(api): 修复用户数据获取接口的空值错误

当用户没有头像时，API 返回 null 导致前端渲染错误
现在返回默认头像 URL

Fixes #456
```

## 代码审查流程

### Pull Request 标准
1. **标题清晰**：简明描述变更内容
2. **描述详细**：解释变更原因和实现方式
3. **关联问题**：链接相关的 Issue
4. **测试说明**：描述如何测试变更
5. **截图/GIF**：UI 变更提供视觉证明

### Pull Request 模板
```markdown
## 变更描述
简要描述此次变更的内容

## 变更类型
- [ ] 新功能
- [ ] Bug 修复
- [ ] 文档更新
- [ ] 代码重构
- [ ] 性能优化

## 测试
- [ ] 添加了测试用例
- [ ] 所有测试通过
- [ ] 手动测试完成

## 检查清单
- [ ] 代码遵循项目规范
- [ ] 自我审查完成
- [ ] 注释清晰准确
- [ ] 文档已更新

## 相关 Issue
Closes #123
```

### 审查要点
- **代码质量**：遵循项目规范和最佳实践
- **功能正确性**：实现符合需求
- **测试覆盖率**：关键逻辑有测试覆盖
- **性能影响**：评估对系统性能的影响
- **安全性**：检查潜在的安全问题

## Git 操作最佳实践

### 提交频率
- 小而频繁的提交优于大的提交
- 每个提交应该是一个逻辑单元
- 避免混合不相关的变更

### 提交前检查
```bash
# 检查状态
git status

# 查看变更差异
git diff

# 暂存特定文件
git add <file>

# 提交前确认暂存区内容
git diff --cached
```

### 合并策略
- 功能分支使用 `merge` 保持历史记录
- 热修复可以使用 `rebase` 保持线性历史
- 避免不必要的合并提交

### 常用 Git 命令
```bash
# 创建并切换到新分支
git checkout -b feature/new-feature

# 更新分支
git pull origin develop

# 交互式重基
git rebase -i HEAD~3

# 查看提交历史
git log --oneline --graph

# 撤销最后一次提交（保留变更）
git reset --soft HEAD~1

# 暂存当前工作
git stash push -m "暂存消息"
```

## 版本标签管理

### 语义化版本
- `MAJOR.MINOR.PATCH`
- `1.0.0` - 主版本号.次版本号.修订号

### 标签创建
```bash
# 创建带注释的标签
git tag -a v1.0.0 -m "发布版本 1.0.0"

# 推送标签到远程
git push origin v1.0.0

# 推送所有标签
git push --tags
```

## 冲突解决

### 合并冲突处理
1. 识别冲突文件
2. 手动编辑解决冲突
3. 标记为已解决
4. 完成合并

```bash
# 查看冲突状态
git status

# 解决冲突后标记
git add <resolved-file>

# 完成合并
git commit
```

### 预防冲突
- 经常从主分支拉取更新
- 保持功能分支生命周期短
- 团队成员间沟通协调

## 团队协作规范

### 分支保护规则
- `main` 和 `develop` 分支启用保护
- 要求 Pull Request 审查
- 要求状态检查通过
- 禁止强制推送

### 工作流程
1. 接到开发任务
2. 创建功能分支
3. 本地开发和测试
4. 推送分支到远程
5. 创建 Pull Request
6. 代码审查和讨论
7. 修改和完善
8. 合并到目标分支
9. 删除功能分支
