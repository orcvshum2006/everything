# 通用开发规则

## 代码风格和结构

### 文件命名
- 使用 kebab-case 命名文件和目录（例如：`my-component.js`）
- 组件文件使用 PascalCase（例如：`MyComponent.jsx`）
- 常量文件使用 SCREAMING_SNAKE_CASE（例如：`API_CONSTANTS.js`）

### 代码组织
- 保持函数简洁，单一职责原则
- 使用有意义的变量和函数名
- 添加适当的注释，特别是复杂逻辑部分
- 保持一致的缩进（推荐 2 或 4 空格）

### 项目结构
```
src/
├── components/     # 可复用组件
├── pages/         # 页面组件
├── utils/         # 工具函数
├── services/      # API 服务
├── constants/     # 常量定义
├── types/         # TypeScript 类型定义
└── assets/        # 静态资源
```

## 最佳实践

### Git 提交
- 使用语义化提交消息：
  - `feat:` 新功能
  - `fix:` 修复 bug
  - `docs:` 文档更新
  - `style:` 代码格式（不影响代码运行的变动）
  - `refactor:` 重构
  - `test:` 增加测试
  - `chore:` 构建过程或辅助工具的变动

### 错误处理
- 总是处理异步操作的错误
- 使用 try-catch 包装可能失败的操作
- 提供有意义的错误消息

### 性能优化
- 避免不必要的重渲染
- 使用适当的缓存策略
- 优化图片和资源加载
