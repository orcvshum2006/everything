# Cursor 规则索引

这个目录包含了项目开发的各种规则和最佳实践指南，帮助 AI 助手更好地理解和遵循项目规范。

## 规则文件概览

### [通用开发规则](mdc:general-development.mdc)
包含适用于所有项目的基础开发规范：
- 代码风格和命名规范
- 文件组织结构
- Git 提交最佳实践
- 错误处理指导
- 性能优化建议

### [前端开发规则](mdc:frontend-development.mdc)
专门针对前端开发的指导原则：
- React/Vue 组件设计最佳实践
- JavaScript/TypeScript 编码规范
- 状态管理策略
- CSS 和样式组织
- 构建工具配置
- 开发工具设置

### [后端开发规则](mdc:backend-development.mdc)
后端开发的专业指南：
- RESTful API 设计原则
- Node.js 和 Python 最佳实践
- 数据库设计规范
- 安全性考虑
- 测试策略
- 错误处理和日志记录

### [项目结构规则](mdc:project-structure.mdc)
标准化的项目组织方式：
- 不同类型项目的目录结构
- 文件命名约定
- 模块化组织原则
- Monorepo 管理
- 配置文件组织

### [Git 工作流规则](mdc:git-workflow.mdc)
版本控制和团队协作规范：
- 分支策略和命名规范
- 语义化提交格式
- Pull Request 流程
- 代码审查标准
- 冲突解决方法
- 团队协作最佳实践

## 如何使用这些规则

1. **新项目开始**：先阅读[项目结构规则](mdc:project-structure.mdc)建立标准目录结构
2. **日常开发**：遵循[通用开发规则](mdc:general-development.mdc)和相应的前端/后端规则
3. **版本控制**：按照[Git 工作流规则](mdc:git-workflow.mdc)进行代码提交和分支管理
4. **团队协作**：确保所有成员了解并遵循相关规则

## 规则更新和维护

- 规则应该随着项目发展和团队经验积累而更新
- 重大规则变更应该经过团队讨论和同意
- 定期回顾和优化现有规则
- 新技术栈或工具的引入应相应更新规则

## 常用参考

### 快速检查清单
- [ ] 代码符合项目风格规范
- [ ] 文件结构和命名符合约定
- [ ] 提交消息遵循语义化格式
- [ ] 安全性和性能考虑已到位
- [ ] 测试覆盖充分
- [ ] 文档已更新

### 工具配置文件
确保项目包含以下配置文件：
- `.eslintrc.js` - 代码检查
- `.prettierrc` - 代码格式化
- `.gitignore` - Git 忽略规则
- `tsconfig.json` - TypeScript 配置（如适用）
- `package.json` - 依赖管理（Node.js 项目）
- `requirements.txt` - 依赖管理（Python 项目）
